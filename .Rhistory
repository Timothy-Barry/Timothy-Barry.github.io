library(distill)
create_post("Enhancers")
![](pic1Tall.jpg){#id .class width=50% height=50%}
p <- load.image("pic1Tall.jpg")
install.packages("imager")
require(imager)
image <- load.image("pic1Tall.jpg")
require(imager)
require(raster)
install.packages("raster")
require(raster)
myJPG <- stack("pic1Tall.jpg")
install.packages("rgdal")
require(raster)
myJPG <- stack("pic1Tall.jpg")
plotRGB(myJPG)
devtools::install_github("ropenscilabs/icon")
install.packages("devtools")
devtools::install_github("ropenscilabs/icon")
icon::fa("rocket")
getwd()
file.create(".nojekyll")
require(devtools)
devtools::use_build_ignore("docs/test.txt")
use_build_ignore("docs/test.txt")
file.create(".nojekyll")
4^300
m <- rep(10, 1000)
m
m <- rep(100, 1000)
m
sum(m)
rel_0 <- m[1]/sum(m)
rel_0
m0 <- c(100, rep(100, 999))
m0
m1 <- c(50, rep(100, 999))
m1
m0[1]
m0[1]/sum(m0)
m1[1]/sum(m0)
rel_exp_0 <- m0[1]/sum(m0)
rel_exp_1 <- m1[1]/sum(m0)
change <- rel_exp_0/rel_exp_1
change
rel_exp_0 <- m0[2]/sum(m0)
re_exp_0
rel_exp_0 <- m0[2]/sum(m0)
rel_exp_0
m0 <- c(100, rep(100, 999))
m1 <- c(50, rep(100, 999))
rel_exp_0 <- m0[1]/sum(m0)
rel_exp_1 <- m1[1]/sum(m1)
change <- rel_exp_0/rel_exp_1
change
rel_exp_0 <- m0[2]/sum(m0)
rel_exp_1 <- m1[2]/sum(m1)
change <- rel_exp_0/rel_exp_1
change
create_post("Single cell RNA sequencing")
require(distill)
create_post("Single cell RNA sequencing")
create_post("Single cell RNA sequencing, unique molecular identifiers")
require(distill)
reate_post("The Sharpe Ratio", draft = TRUE)
create_post("gamma-poisson-nb", draft = TRUE)
NegBinomial
require(stats)
NegBinomial
dnbinom
getwd()
getwd()
getwd()
"../Timothy-Barry.github.io/"
require(distill)
create_post("Measure theory vocabulary", draft = TRUE)
library(distill)
create_post("Exponential families", draft = TRUE)
require(numDeriv)
require(plyr)
require(tidyverse)
simple_pois_gamma_lik_factory <- function(read_counts, lib_sizes) {
log_L <- function(params) {
r <- params[1]
alpha <- params[2]
if (r <= 0 || alpha <= 0) return(-Inf)
indiv_liks <- log(choose(read_counts + r - 1, read_counts)) + read_counts * (log(lib_sizes * alpha) - log(lib_sizes * alpha + 1)) - r * log(lib_sizes * alpha + 1)
sum(indiv_liks)
}
}
# Fit simple model using NB glm
r <- 4
mu <- 0.5
mus <- rgamma(n = n, shape = r, scale = mu/r)
r <- 4
mu <- 0.5
mu./r
mu/r
mus <- rgamma(n = n, shape = r, scale = mu/r)
mu/r
r
mus <- rgamma(n = n, shape = r, scale = mu/r)
n <- 1000
n
r <- 2
mu <- 0.5
n <- 1000
mus <- rgamma(n = n, shape = r, scale = mu/r)
mus
# Fit simple model using NB glm
r <- 2
mu <- 1000
n <- 1000
mu
r
n
mus <- rgamma(n = n, shape = r, scale = mu/r)
mus
lib_sizes <- 1
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
warnings()
mus
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
n <- 1000
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
1:n
mus[i]
i - 1
i <- 1
mus[i]
lib_sizes <- rep(1,n)
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
x1
require(MASS)
glm.nb(formula = x1 ~ 1)
e^6.887
exp(6.887)
# Fit simple model using NB glm
r <- 1
mu <- 1000
n <- 1000
lib_sizes <- rep(1,n)
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
glm.nb(formula = x1 ~ 1)
exp(6.919)
negative.binomial(theta = r, link = "log")
glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
exp(6.919  )
exp(6.919  )
exp(6.919 )
# Fit simple model using NB glm
r <- 1
mu <- 1000
n <- 1000
lib_sizes <- rep(1,n)
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
glm.nb(formula = x1 ~ 1)
glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
# Fit simple model using NB glm
r <- 1
mu <- 1000
n <- 1000
lib_sizes <- rep(1,n)
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
glm.nb(formula = x1 ~ 1)
glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
fit$coefficients
exp(fit$coefficients)
# Fit simple model using NB glm
r <- 1
mu <- 1000
n <- 1000
lib_sizes <- rep(1,n)
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
glm.nb(formula = x1 ~ 1)
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
exp(fit$coefficients)
exp(fit$coefficients[1])
exp(fit$coefficients[[1]])
# Fit simple model using NB glm
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
lib_Sizes
lib_sizes
# Fit simple model using NB glm
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
lib_sizes
mus <- rgamma(n = n, shape = r, scale = mu/r)
mus
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
x1
glm.nb(formula = x1 ~ 1)
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), o)
glm.nb(formula = x1 ~ 1)
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), o)
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
exp(fit$coefficients[[1]])
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
exp(fit$coefficients[[1]])
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
exp(fit$coefficients[[1]])
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"))
exp(fit$coefficients[[1]])
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = lib_sizes)
lib_sizes
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
fit
exp(fit$coefficients[[1]])
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = -log(lib_sizes))
fit
exp(fit$coefficients[[1]])
r <- 1
mu <- 1
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = -log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 2
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
# Fit simple model using NB glm
r <- 1
mu <- 5
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 5
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 5
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 5
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 5
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 5
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 0.4
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 0.4
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 0.4
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 0.5
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
r <- 1
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]])
# Fit simple model using NB glm
r <- 2
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 2
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 2
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 2
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 2
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 2
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 3
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 3
mu <- 10
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 3
mu <- 0.7
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
r <- 3
mu <- 0.7
n <- 1000
lib_sizes <- round(runif(n = n, min = 800, max = 1200))
mus <- rgamma(n = n, shape = r, scale = mu/r)
x1 <- sapply(1:n, function(i) rpois(n = 1, lambda = mus[i] * lib_sizes[i]))
fit <- glm(x1 ~ 1, family = negative.binomial(theta = r, link = "log"), offset = log(lib_sizes))
exp(fit$coefficients[[1]]) # seems to work!
require(MASS)
require(numDeriv)
require(plyr)
require(tidyverse)
create_post("Exponential families and information", draft = TRUE)
require(distill)
create_post("Exponential families and information", draft = TRUE)
create_post("A roadmap of high-dimensional statistics", draft = TRUE)
library(distill)
create_post("A roadmap of high-dimensional statistics", draft = TRUE)
?glm
